// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using TrackerAPI.Data;

namespace ActivityTrackerAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180307201342_InitialBuild2")]
    partial class InitialBuild2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("TrackerAPI.Models.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ActivityTypeId");

                    b.Property<double>("Distance");

                    b.Property<string>("FirebaseLocation")
                        .IsRequired();

                    b.Property<double>("Pace");

                    b.Property<DateTime>("StartTime");

                    b.HasKey("Id");

                    b.HasIndex("ActivityTypeId");

                    b.ToTable("Activity");
                });

            modelBuilder.Entity("TrackerAPI.Models.ActivityType", b =>
                {
                    b.Property<int>("ActivityTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Description");

                    b.HasKey("ActivityTypeId");

                    b.ToTable("ActivityType");
                });

            modelBuilder.Entity("TrackerAPI.Models.Note", b =>
                {
                    b.Property<int>("NoteId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ActivityId");

                    b.Property<string>("Content")
                        .IsRequired();

                    b.HasKey("NoteId");

                    b.HasIndex("ActivityId");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("TrackerAPI.Models.Activity", b =>
                {
                    b.HasOne("TrackerAPI.Models.ActivityType", "ActivityType")
                        .WithMany()
                        .HasForeignKey("ActivityTypeId");
                });

            modelBuilder.Entity("TrackerAPI.Models.Note", b =>
                {
                    b.HasOne("TrackerAPI.Models.Activity", "Activity")
                        .WithMany("Notes")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
